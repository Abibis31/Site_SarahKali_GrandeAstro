import OpenAI from 'openai';

// Configura√ß√£o do cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Personalidade da Sarah Kali - Vers√£o Melhorada com Contexto
const SARAH_PERSONALITY = `Voc√™ √© Sarah Kali, uma cartomante espiritual com mais de 15 anos de experi√™ncia em tarot, astrologia e numerologia.

SUA PERSONALIDADE:
- Fala de forma natural, direta e acolhedora
- Evita linguagem excessivamente formal ou rebuscada
- √â pr√°tica e focada em ajudar
- Usa emojis com modera√ß√£o (1-2 por resposta)
- Mant√©m conversas fluidas e contextualizadas

FLUXO DE ATENDIMENTO CR√çTICO - CONTEXTO √â FUNDAMENTAL:
1. QUANDO O USU√ÅRIO J√Å ESCOLHEU UM SERVI√áO (tarot, numerologia, mapa astral):
   - CONTINUE com esse servi√ßo SEM voltar a oferecer outras op√ß√µes
   - NUNCA repita a lista de servi√ßos depois que o usu√°rio j√° escolheu
   - Avance naturalmente no fluxo do servi√ßo escolhido

2. PARA TAROT ESPECIFICAMENTE:
   - Se o usu√°rio pede "leitura geral", fa√ßa uma leitura geral de tarot
   - N√£o pe√ßa para escolher entre servi√ßos novamente
   - Simule uma leitura real com carta(s) espec√≠fica(s)

3. IMPORTANTE: SEMPRE mantenha o contexto da conversa anterior. 
   - Se o usu√°rio j√° escolheu tarot, continue com tarot
   - Se j√° escolheu numerologia, continue com numerologia  
   - Se j√° escolheu mapa astral, continue com mapa astral

NUNCA:
- Repita a oferta de servi√ßos depois que o usu√°rio j√° escolheu um
- Pe√ßa confirma√ß√µes desnecess√°rias
- Entre em loops de repeti√ß√£o
- Volte ao in√≠cio depois que o fluxo j√° come√ßou

EXEMPLOS DE FLUXO CORRETO:
Usu√°rio: "gostaria de uma leitura de tarot"
Sarah: "Perfeito! Vamos fazer uma leitura de tarot. Voc√™ tem uma pergunta espec√≠fica ou prefere uma leitura geral sobre sua vida?"

Usu√°rio: "leitura geral"  
Sarah: "[FAZ LEITURA DE TAROT COMPLETA]"

SEJA:
- Natural e conversacional
- Direta e clara
- Acolhedora mas pr√°tica
- Contextualizada na conversa`;

/**
 * Fun√ß√£o para detectar se o usu√°rio est√° pedindo um servi√ßo espec√≠fico
 */
function detectarServicoSolicitado(mensagem) {
    const mensagemLower = mensagem.toLowerCase();
    
    if (mensagemLower.includes('mapa astral') || mensagemLower.includes('astral') || 
        mensagemLower.includes('signos') || mensagemLower.includes('zod√≠aco') ||
        mensagemLower.includes('planetas') || mensagemLower.includes('casas astrol√≥gicas')) {
        return 'mapa_astral';
    }
    
    if (mensagemLower.includes('numerologia') || mensagemLower.includes('n√∫mero') || 
        mensagemLower.includes('caminho de vida') || mensagemLower.includes('vibra√ß√£o') ||
        mensagemLower.includes('numerol√≥gica')) {
        return 'numerologia';
    }
    
    if (mensagemLower.includes('tarot') || mensagemLower.includes('cartas') || 
        mensagemLower.includes('leitura') || mensagemLower.includes('tiragem') ||
        mensagemLower.includes('arcanos')) {
        return 'tarot';
    }
    
    return 'geral';
}

/**
 * Fun√ß√£o para verificar se j√° estamos em um fluxo de servi√ßo espec√≠fico
 */
function verificarFluxoAtivo(historico) {
    // Verifica as √∫ltimas mensagens para ver se j√° escolhemos um servi√ßo
    const ultimasMensagens = historico.slice(-4); // √öltimas 4 mensagens
    
    for (let i = ultimasMensagens.length - 1; i >= 0; i--) {
        const msg = ultimasMensagens[i];
        
        if (msg.role === 'assistant') {
            if (msg.content.includes('tarot') && 
                (msg.content.includes('leitura') || msg.content.includes('cartas'))) {
                return 'tarot';
            }
            if (msg.content.includes('numerologia') && msg.content.includes('nome completo')) {
                return 'numerologia';
            }
            if (msg.content.includes('mapa astral') && msg.content.includes('data de nascimento')) {
                return 'mapa_astral';
            }
        }
        
        if (msg.role === 'user') {
            const servico = detectarServicoSolicitado(msg.content);
            if (servico !== 'geral') {
                return servico;
            }
        }
    }
    
    return null;
}

/**
 * Fun√ß√£o para verificar se a mensagem cont√©m dados para numerologia
 */
function verificarDadosNumerologia(mensagem) {
    console.log('üîç Verificando dados para numerologia...');
    
    // Verifica se tem data de nascimento (formato DD/MM/AAAA)
    const temData = /\d{1,2}\/\d{1,2}\/\d{4}/.test(mensagem);
    
    // Verifica se tem nome completo (pelo menos 2 palavras com mais de 3 letras)
    const palavras = mensagem.split(/\s+/);
    const palavrasComTamanho = palavras.filter(palavra => palavra.length >= 3);
    const temNome = palavrasComTamanho.length >= 2;
    
    console.log(`üìä Data detectada: ${temData}, Nome detectado: ${temNome}`);
    console.log(`üìù Palavras com tamanho: ${palavrasComTamanho.length}`);
    
    return temData && temNome;
}

/**
 * Fun√ß√£o para verificar se a mensagem cont√©m dados para mapa astral
 */
function verificarDadosMapaAstral(mensagem) {
    console.log('üîç Verificando dados para mapa astral...');
    
    // Verifica se tem data de nascimento
    const temData = /\d{1,2}\/\d{1,2}\/\d{4}/.test(mensagem);
    
    // Verifica se tem hor√°rio (formato HH:MM ou HHhMM)
    const temHorario = /\d{1,2}[:h]\d{2}/.test(mensagem);
    
    // Verifica se tem local (pelo menos uma palavra que parece cidade/estado)
    const temLocal = /(s√£o paulo|rio de janeiro|minas|bahia|bras√≠lia|porto alegre|curitiba|fortaleza|recife|belo horizonte|salvador|manaus)/i.test(mensagem) || 
                    /(sp|rj|mg|rs|pr|sc|ba|pe|ce|df|go|mt|ms|am|pa)/i.test(mensagem);
    
    console.log(`üìä Data: ${temData}, Hor√°rio: ${temHorario}, Local: ${temLocal}`);
    
    return temData && temHorario && temLocal;
}

/**
 * Verifica se j√° pedimos dados para um servi√ßo espec√≠fico
 */
function jaPediuDados(servico, historico) {
    if (servico === 'mapa_astral') {
        return historico.some(msg => 
            msg.role === 'assistant' && 
            (msg.content.includes('data de nascimento') || msg.content.includes('mapa astral'))
        );
    }
    
    if (servico === 'numerologia') {
        return historico.some(msg => 
            msg.role === 'assistant' && 
            (msg.content.includes('nome completo') || msg.content.includes('numerologia'))
        );
    }
    
    return false;
}

/**
 * Extrai dados da mensagem para criar um prompt espec√≠fico
 */
function criarPromptComDados(servico, mensagem, historico) {
    if (servico === 'numerologia') {
        // Extrai a data
        const dataMatch = mensagem.match(/\d{1,2}\/\d{1,2}\/\d{4}/);
        const data = dataMatch ? dataMatch[0] : 'data n√£o encontrada';
        
        // Extrai o nome (assume que as primeiras palavras s√£o o nome)
        const palavras = mensagem.split(/\s+/).filter(palavra => palavra.length >= 3);
        const nome = palavras.slice(0, 3).join(' '); // Pega at√© 3 palavras como nome
        
        return `O usu√°rio forneceu os dados para numerologia:
Nome: ${nome}
Data de nascimento: ${data}

FA√áA uma an√°lise numerol√≥gica COMPLETA e detalhada baseada nestes dados. Analise:
- Caminho de vida
- N√∫mero de express√£o
- N√∫mero de alma
- Anos pessoais
- Desafios e oportunidades

Seja espec√≠fico e detalhado na an√°lise.`;
    }
    
    if (servico === 'mapa_astral') {
        const dataMatch = mensagem.match(/\d{1,2}\/\d{1,2}\/\d{4}/);
        const data = dataMatch ? dataMatch[0] : 'data n√£o encontrada';
        
        const horarioMatch = mensagem.match(/\d{1,2}[:h]\d{2}/);
        const horario = horarioMatch ? horarioMatch[0] : 'hor√°rio n√£o encontrado';
        
        return `O usu√°rio forneceu os dados para mapa astral:
Data de nascimento: ${data}
Hor√°rio de nascimento: ${horario}

FA√áA uma an√°lise astral COMPLETA e detalhada baseada nestes dados. Analise:
- Signo solar, lunar e ascendente
- Posi√ß√µes planet√°rias principais
- Casas astrol√≥gicas relevantes
- Aspectos importantes
- Tend√™ncias e caracter√≠sticas marcantes

Seja espec√≠fico e detalhado na an√°lise.`;
    }
    
    return null;
}

export async function getOpenAIResponse(messages) {
    console.log('üîÆ Sarah Kali - Processando mensagem...');
    
    // Verifica√ß√£o da API Key
    if (!process.env.OPENAI_API_KEY) {
        console.error('‚ùå OPENAI_API_KEY n√£o encontrada');
        return "Estou com problemas de conex√£o no momento. Por favor, tente novamente mais tarde.";
    }

    try {
        if (!messages || !Array.isArray(messages) || messages.length === 0) {
            return "Ol√°! Como posso ajudar voc√™ hoje?";
        }

        // Pega a √∫ltima mensagem do usu√°rio e o hist√≥rico completo
        const lastMessage = messages[messages.length - 1]?.content || '';
        const historicoCompleto = messages;

        if (!lastMessage.trim()) {
            return "Conte-me como posso ajudar voc√™ hoje.";
        }

        console.log(`üì® Mensagem: "${lastMessage.substring(0, 100)}..."`);
        console.log(`üìä Hist√≥rico completo: ${historicoCompleto.length} mensagens`);

        // Detecta se √© um servi√ßo espec√≠fico na √∫ltima mensagem
        const servicoSolicitado = detectarServicoSolicitado(lastMessage);
        
        // Verifica se j√° estamos em um fluxo ativo
        const fluxoAtivo = verificarFluxoAtivo(historicoCompleto);
        
        console.log(`üéØ Servi√ßo solicitado: ${servicoSolicitado}, Fluxo ativo: ${fluxoAtivo}`);

        // DECIS√ÉO: Qual servi√ßo considerar?
        let servicoParaUsar = servicoSolicitado;
        if (servicoSolicitado === 'geral' && fluxoAtivo) {
            servicoParaUsar = fluxoAtivo; // Mant√©m o fluxo anterior
        } else if (servicoSolicitado !== 'geral') {
            servicoParaUsar = servicoSolicitado; // Novo servi√ßo solicitado
        }

        console.log(`üîß Servi√ßo para usar: ${servicoParaUsar}`);

        // Verifica se temos dados completos para o servi√ßo
        let dadosCompletos = false;
        let promptEspecifico = null;

        if (servicoParaUsar === 'numerologia') {
            dadosCompletos = verificarDadosNumerologia(lastMessage);
            if (dadosCompletos) {
                promptEspecifico = criarPromptComDados('numerologia', lastMessage, historicoCompleto);
                console.log('‚úÖ Dados completos para numerologia - criando prompt espec√≠fico');
            }
        } else if (servicoParaUsar === 'mapa_astral') {
            dadosCompletos = verificarDadosMapaAstral(lastMessage);
            if (dadosCompletos) {
                promptEspecifico = criarPromptComDados('mapa_astral', lastMessage, historicoCompleto);
                console.log('‚úÖ Dados completos para mapa astral - criando prompt espec√≠fico');
            }
        }

        // Se detectamos um servi√ßo espec√≠fico mas n√£o temos dados ainda
        if (servicoParaUsar !== 'geral' && !dadosCompletos) {
            const jaPediu = jaPediuDados(servicoParaUsar, historicoCompleto);
            
            if (!jaPediu) {
                if (servicoParaUsar === 'mapa_astral') {
                    return "Claro! Para fazer seu mapa astral, preciso que voc√™ me informe:\n\n‚Ä¢ Data de nascimento (dia/m√™s/ano)\n‚Ä¢ Hor√°rio de nascimento\n‚Ä¢ Cidade e estado onde nasceu\n\nPode me passar essas informa√ß√µes?";
                }
                
                if (servicoParaUsar === 'numerologia') {
                    return "Perfeito! Para fazer sua an√°lise numerol√≥gica, preciso de:\n\n‚Ä¢ Seu nome completo\n‚Ä¢ Sua data de nascimento (dia/m√™s/ano)\n\nPode me informar esses dados?";
                }
            }
            // Se j√° pediu os dados antes, deixa o fluxo normal continuar
        }

        // Prepara mensagens para a OpenAI
        let mensagensCompletas = [
            {
                role: "system",
                content: SARAH_PERSONALITY
            },
            ...historicoCompleto.map(msg => ({
                role: msg.role,
                content: msg.content
            }))
        ];

        // Se temos dados completos, adiciona um prompt espec√≠fico no final
        if (promptEspecifico) {
            mensagensCompletas.push({
                role: "system",
                content: promptEspecifico
            });
        }

        console.log(`üì§ Enviando ${mensagensCompletas.length} mensagens para OpenAI`);

        // Chamada para API OpenAI com HIST√ìRICO COMPLETO
        const completion = await openai.chat.completions.create({
            model: "gpt-4",
            messages: mensagensCompletas,
            temperature: 0.7,
            max_tokens: 1500,
            top_p: 0.9,
        });

        console.log(`üî¢ Tokens usados: ${completion.usage?.total_tokens || 'N/A'}`);

        if (!completion.choices?.[0]?.message?.content) {
            throw new Error('Resposta da API incompleta');
        }

        let resposta = completion.choices[0].message.content.trim();

        // Limpeza e otimiza√ß√£o da resposta
        resposta = otimizarResposta(resposta);

        console.log(`‚úÖ Resposta: ${resposta.substring(0, 100)}...`);

        return resposta;

    } catch (error) {
        console.error('‚ùå Erro:', error.message);
        
        const respostasFallback = [
            "Desculpe, tive um problema t√©cnico. Pode repetir?",
            "Estou com dificuldades no momento. Podemos tentar novamente?",
            "Hmm, algo deu errado. Pode reformular sua pergunta?"
        ];
        
        return respostasFallback[Math.floor(Math.random() * respostasFallback.length)];
    }
}

/**
 * Fun√ß√£o para otimizar e limpar as respostas
 */
function otimizarResposta(resposta) {
    // Remove sauda√ß√µes muito longas
    resposta = resposta.replace(/^(Ol√°, (querido|querida|amigo|amiga|alma|viajante).+?\..+?\.)/i, '');
    
    // Remove repeti√ß√µes de emojis (mais de 2 seguidos)
    resposta = resposta.replace(/([‚ú®üîÆüí´üåô‚≠êüôè]){3,}/g, '$1');
    
    // Garante que n√£o comece com v√≠rgula ou ponto
    resposta = resposta.replace(/^[.,]\s*/, '');
    
    // Se a resposta estiver muito curta ap√≥s limpeza
    if (resposta.length < 10) {
        return "Como posso ajudar voc√™?";
    }
    
    // Remove m√∫ltiplos espa√ßos
    resposta = resposta.replace(/\s+/g, ' ').trim();
    
    return resposta;
}

// Exporta√ß√£o para compatibilidade
export { getOpenAIResponse as getGeminiResponse };